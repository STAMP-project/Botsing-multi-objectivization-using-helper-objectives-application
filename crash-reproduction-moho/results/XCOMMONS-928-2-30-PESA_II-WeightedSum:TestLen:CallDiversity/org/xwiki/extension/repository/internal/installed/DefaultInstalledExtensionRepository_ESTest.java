/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 02 14:36:28 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Hashtable;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import javatests.DiamondIterableMapMRO;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.DefaultExtensionIssueManagement;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.ExtensionScm;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.wrap.WrappingInstalledExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiamondIterableMapMRO diamondIterableMapMRO0 = new DiamondIterableMapMRO();
      ExtensionId extensionId0 = new ExtensionId("I\u0004huT#2!X", "I\u0004huT#2!X");
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension0 = (WrappingInstalledExtension<DefaultInstalledExtension>) mock(WrappingInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(extensionId0, extensionId0).when(wrappingInstalledExtension0).getId();
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      LinkedBlockingDeque<ExtensionAuthor> linkedBlockingDeque0 = new LinkedBlockingDeque<ExtensionAuthor>();
      Vector<DefaultExtensionDependency> vector0 = new Vector<DefaultExtensionDependency>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      DefaultExtensionIssueManagement defaultExtensionIssueManagement0 = new DefaultExtensionIssueManagement("I\u0004huT#2!X", "JFl<");
      ArrayDeque<ExtensionLicense> arrayDeque1 = new ArrayDeque<ExtensionLicense>();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension1 = (WrappingInstalledExtension<DefaultInstalledExtension>) mock(WrappingInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(linkedBlockingDeque0).when(wrappingInstalledExtension1).getAuthors();
      doReturn("I\u0004huT#2!X").when(wrappingInstalledExtension1).getCategory();
      doReturn(vector0).when(wrappingInstalledExtension1).getDependencies();
      doReturn("JFl<").when(wrappingInstalledExtension1).getDescription();
      doReturn(arrayDeque0).when(wrappingInstalledExtension1).getFeatures();
      doReturn(extensionId0).when(wrappingInstalledExtension1).getId();
      doReturn(defaultExtensionIssueManagement0).when(wrappingInstalledExtension1).getIssueManagement();
      doReturn(arrayDeque1).when(wrappingInstalledExtension1).getLicenses();
      doReturn("JFl<").when(wrappingInstalledExtension1).getName();
      doReturn(hashtable0).when(wrappingInstalledExtension1).getProperties();
      doReturn((ExtensionScm) null).when(wrappingInstalledExtension1).getScm();
      doReturn("LK+c(!XS$a").when(wrappingInstalledExtension1).getSummary();
      doReturn("LK+c(!XS$a").when(wrappingInstalledExtension1).getType();
      doReturn("JFl<").when(wrappingInstalledExtension1).getWebSite();
      WrappingInstalledExtension<WrappingInstalledExtension<DefaultInstalledExtension>> wrappingInstalledExtension2 = new WrappingInstalledExtension<WrappingInstalledExtension<DefaultInstalledExtension>>(wrappingInstalledExtension1);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(wrappingInstalledExtension2).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      diamondIterableMapMRO0.put(" not ", (Object) null);
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension((LocalExtension) wrappingInstalledExtension0, "`qXlNJ^{)*z~w[|q}", false, (Map<String, Object>) diamondIterableMapMRO0);
  }
}
