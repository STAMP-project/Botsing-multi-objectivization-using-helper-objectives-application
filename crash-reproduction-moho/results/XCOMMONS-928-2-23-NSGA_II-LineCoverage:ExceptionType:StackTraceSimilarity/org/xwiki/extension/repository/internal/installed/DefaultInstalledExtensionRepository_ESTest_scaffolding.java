/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 05 14:30:42 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultInstalledExtensionRepository_ESTest_scaffolding.class.getClassLoader() ,
      "org.xwiki.extension.repository.internal.AbstractCachedExtensionRepository",
      "org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension",
      "org.xwiki.extension.ExtensionFile",
      "org.xwiki.component.phase.Initializable",
      "org.xwiki.stability.Unstable",
      "org.xwiki.extension.ExtensionId",
      "org.xwiki.extension.ExtensionException",
      "org.xwiki.script.wrap.AbstractWrappingObject",
      "org.xwiki.extension.wrap.WrappingExtension",
      "org.xwiki.extension.wrap.WrappingLocalExtension",
      "org.xwiki.extension.repository.search.Searchable",
      "org.xwiki.extension.repository.result.IterableResult",
      "org.xwiki.extension.AbstractExtension",
      "org.xwiki.extension.ExtensionScm",
      "org.xwiki.extension.repository.search.AdvancedSearchable",
      "org.xwiki.extension.wrap.AbstractWrappingObject",
      "org.xwiki.extension.repository.InstalledExtensionRepository",
      "org.xwiki.extension.repository.internal.installed.AbstractInstalledExtensionRepository",
      "org.xwiki.extension.Extension",
      "org.xwiki.extension.InstalledExtension",
      "org.xwiki.extension.repository.AbstractExtensionRepository",
      "org.xwiki.extension.repository.ExtensionRepositoryDescriptor",
      "org.xwiki.extension.LocalExtension",
      "org.xwiki.extension.ResolveException",
      "org.xwiki.extension.LocalExtensionFile",
      "org.xwiki.extension.InvalidExtensionException",
      "org.xwiki.extension.repository.ExtensionRepository",
      "org.xwiki.extension.UninstallException",
      "org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository",
      "org.xwiki.extension.InstallException",
      "org.xwiki.extension.ExtensionIssueManagement",
      "org.xwiki.extension.ExtensionDependency",
      "org.xwiki.extension.ExtensionAuthor",
      "org.xwiki.extension.ExtensionLicense"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension", false, DefaultInstalledExtensionRepository_ESTest_scaffolding.class.getClassLoader()));
  }
}
