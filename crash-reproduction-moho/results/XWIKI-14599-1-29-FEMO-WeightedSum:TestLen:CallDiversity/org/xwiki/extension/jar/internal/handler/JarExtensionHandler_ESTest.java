/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 05 08:05:42 UTC 2020
 */

package org.xwiki.extension.jar.internal.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.classloader.ClassLoaderManager;
import org.xwiki.classloader.NamespaceURLClassLoader;
import org.xwiki.component.internal.multi.ComponentManagerManager;
import org.xwiki.extension.InstalledExtension;
import org.xwiki.extension.handler.internal.AbstractExtensionHandler;
import org.xwiki.extension.jar.internal.handler.JarExtensionHandler;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.Request;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class JarExtensionHandler_ESTest extends JarExtensionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(request0).getId();
      doReturn(arrayList0).when(request0).getPropertyNames();
      DefaultRequest defaultRequest0 = new DefaultRequest(request0);
      InstalledExtension installedExtension0 = mock(InstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(installedExtension0).isValid(anyString());
      JarExtensionHandler jarExtensionHandler0 = new JarExtensionHandler();
      ComponentManagerManager componentManagerManager0 = mock(ComponentManagerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(jarExtensionHandler0, (Class<?>) JarExtensionHandler.class, "componentManagerManager", (Object) componentManagerManager0);
      ClassLoaderManager classLoaderManager0 = mock(ClassLoaderManager.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceURLClassLoader) null).when(classLoaderManager0).getURLClassLoader(anyString() , anyBoolean());
      Injector.inject(jarExtensionHandler0, (Class<?>) JarExtensionHandler.class, "jarExtensionClassLoader", (Object) classLoaderManager0);
      Provider<String> provider0 = (Provider<String>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(jarExtensionHandler0, (Class<?>) AbstractExtensionHandler.class, "defaultValidatorProvider", (Object) provider0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(jarExtensionHandler0, (Class<?>) AbstractExtensionHandler.class, "logger", (Object) logger0);
      Injector.validateBean(jarExtensionHandler0, (Class<?>) JarExtensionHandler.class);
      // Undeclared exception!
      jarExtensionHandler0.uninstall(installedExtension0, "ep(C", (Request) defaultRequest0);
  }
}
