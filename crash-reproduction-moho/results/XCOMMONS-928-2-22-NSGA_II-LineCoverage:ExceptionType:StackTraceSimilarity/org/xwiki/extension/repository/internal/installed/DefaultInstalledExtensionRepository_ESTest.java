/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 05 14:30:24 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionIssueManagement;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.ExtensionScm;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.test.EmptyExtension;
import org.xwiki.extension.wrap.WrappingInstalledExtension;
import org.xwiki.extension.wrap.WrappingLocalExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      Vector<ExtensionAuthor> vector0 = new Vector<ExtensionAuthor>();
      PriorityQueue<DefaultExtensionDependency> priorityQueue0 = new PriorityQueue<DefaultExtensionDependency>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      ExtensionId extensionId0 = new ExtensionId("0(u?XFF", (String) null);
      EmptyExtension emptyExtension0 = new EmptyExtension(extensionId0, (String) null);
      Collection<ExtensionLicense> collection0 = emptyExtension0.getLicenses();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>(hashMap0);
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension0 = (WrappingInstalledExtension<DefaultInstalledExtension>) mock(WrappingInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0).when(wrappingInstalledExtension0).getAuthors();
      doReturn("_PJ@", "").when(wrappingInstalledExtension0).getCategory();
      doReturn(priorityQueue0, priorityQueue0).when(wrappingInstalledExtension0).getDependencies();
      doReturn("_PJ@", "").when(wrappingInstalledExtension0).getDescription();
      doReturn(set0, set0).when(wrappingInstalledExtension0).getFeatures();
      doReturn((ExtensionId) null, (ExtensionId) null).when(wrappingInstalledExtension0).getId();
      doReturn((ExtensionIssueManagement) null, (ExtensionIssueManagement) null).when(wrappingInstalledExtension0).getIssueManagement();
      doReturn(collection0, collection0).when(wrappingInstalledExtension0).getLicenses();
      doReturn((String) null, "Connection is closed.").when(wrappingInstalledExtension0).getName();
      doReturn(hashtable0, hashMap0).when(wrappingInstalledExtension0).getProperties();
      doReturn((ExtensionScm) null, (ExtensionScm) null).when(wrappingInstalledExtension0).getScm();
      doReturn("aj_jhe[A5u'ByCa", (String) null).when(wrappingInstalledExtension0).getSummary();
      doReturn("Connection is closed.", (String) null).when(wrappingInstalledExtension0).getType();
      doReturn("Extension dependency [%s] is invalid", (String) null).when(wrappingInstalledExtension0).getWebSite();
      WrappingLocalExtension<WrappingInstalledExtension<DefaultInstalledExtension>> wrappingLocalExtension0 = new WrappingLocalExtension<WrappingInstalledExtension<DefaultInstalledExtension>>(wrappingInstalledExtension0);
      DefaultInstalledExtension defaultInstalledExtension0 = new DefaultInstalledExtension(wrappingLocalExtension0, defaultInstalledExtensionRepository0);
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension1 = new WrappingInstalledExtension<DefaultInstalledExtension>(defaultInstalledExtension0);
      LocalExtension localExtension0 = wrappingInstalledExtension1.getLocalExtension();
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(localExtension0).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "logger", (Object) logger0);
      Injector.validateBean(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class);
      LocalExtension localExtension1 = mock(LocalExtension.class, new ViolatedAssumptionAnswer());
      doReturn(extensionId0, extensionId0).when(localExtension1).getId();
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension(localExtension1, "0(u?XFF", false, (Map<String, Object>) null);
  }
}
