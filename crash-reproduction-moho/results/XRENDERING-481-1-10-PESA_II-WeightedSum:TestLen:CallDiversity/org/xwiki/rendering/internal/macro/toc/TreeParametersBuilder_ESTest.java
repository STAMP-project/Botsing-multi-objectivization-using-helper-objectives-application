/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 03 14:01:02 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.filter.xml.serializer.XMLSerializerFactory;
import org.xwiki.rendering.block.ExpandedMacroBlock;
import org.xwiki.rendering.block.SpaceBlock;
import org.xwiki.rendering.internal.macro.toc.TreeParametersBuilder;
import org.xwiki.rendering.internal.renderer.AbstractBlockRenderer;
import org.xwiki.rendering.internal.renderer.xhtml.AnnotatedXHTMLBlockRenderer;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.xdomxmlcurrent.internal.renderer.XDOMXMLRenderer;
import org.xwiki.rendering.xml.internal.renderer.AbstractStreamRendererFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TreeParametersBuilder_ESTest extends TreeParametersBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeParametersBuilder treeParametersBuilder0 = new TreeParametersBuilder();
      SpaceBlock spaceBlock0 = new SpaceBlock();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager("Failed to convert document to syntax [");
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      Class<?> class0 = xYDatasetTableModel0.getColumnClass((-1));
      Map<String, String> map0 = embeddableComponentManager0.getInstanceMap((Type) class0);
      AnnotatedXHTMLBlockRenderer annotatedXHTMLBlockRenderer0 = new AnnotatedXHTMLBlockRenderer();
      XDOMXMLRenderer xDOMXMLRenderer0 = new XDOMXMLRenderer();
      XMLSerializerFactory xMLSerializerFactory0 = mock(XMLSerializerFactory.class, new ViolatedAssumptionAnswer());
      Injector.inject(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class, "serializerFactory", (Object) xMLSerializerFactory0);
      Injector.inject(xDOMXMLRenderer0, (Class<?>) AbstractStreamRendererFactory.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class);
      Injector.inject(annotatedXHTMLBlockRenderer0, (Class<?>) AnnotatedXHTMLBlockRenderer.class, "annotatedXHTMLRendererFactory", (Object) xDOMXMLRenderer0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(annotatedXHTMLBlockRenderer0, (Class<?>) AbstractBlockRenderer.class, "logger", (Object) logger0);
      Injector.validateBean(annotatedXHTMLBlockRenderer0, (Class<?>) AnnotatedXHTMLBlockRenderer.class);
      ExpandedMacroBlock expandedMacroBlock0 = new ExpandedMacroBlock("", map0, annotatedXHTMLBlockRenderer0, true);
      macroTransformationContext0.setCurrentMacroBlock(expandedMacroBlock0);
      // Undeclared exception!
      treeParametersBuilder0.build(spaceBlock0, tocMacroParameters0, macroTransformationContext0);
  }
}
