/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 02 23:04:58 UTC 2020
 */

package com.xpn.xwiki.internal.skin;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class EnvironmentSkin_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.xpn.xwiki.internal.skin.EnvironmentSkin"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(EnvironmentSkin_ESTest_scaffolding.class.getClassLoader() ,
      "org.xwiki.rendering.parser.ParseException",
      "org.apache.commons.lang.StringUtils",
      "org.xwiki.component.phase.Initializable",
      "org.apache.commons.configuration.PropertiesConfiguration$IOFactory",
      "org.apache.commons.configuration.FileSystem",
      "org.xwiki.skin.Resource",
      "com.xpn.xwiki.internal.skin.AbstractResource",
      "org.apache.commons.lang3.StringUtils",
      "org.xwiki.rendering.syntax.Syntax",
      "org.xwiki.component.annotation.Role",
      "org.apache.commons.lang.exception.NestableDelegate",
      "org.apache.commons.lang3.ClassUtils",
      "org.apache.commons.lang.exception.NestableException",
      "org.apache.commons.configuration.AbstractConfiguration",
      "org.apache.commons.configuration.event.ConfigurationListener",
      "com.xpn.xwiki.internal.skin.InternalSkinManager",
      "org.xwiki.skin.Skin",
      "org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream",
      "com.xpn.xwiki.internal.skin.AbstractSkin$1",
      "org.apache.commons.configuration.Lock",
      "org.apache.commons.configuration.reloading.InvariantReloadingStrategy",
      "org.apache.commons.configuration.AbstractConfiguration$2",
      "org.apache.commons.configuration.AbstractConfiguration$1",
      "com.xpn.xwiki.internal.skin.AbstractSkin",
      "org.apache.commons.configuration.PropertiesConfiguration$DefaultIOFactory",
      "org.apache.commons.configuration.event.ConfigurationErrorListener",
      "org.apache.commons.configuration.reloading.ReloadingStrategy",
      "org.apache.commons.configuration.PropertyConverter",
      "org.apache.commons.configuration.ConfigurationException",
      "org.apache.commons.lang3.exception.ExceptionUtils",
      "org.apache.commons.configuration.Configuration",
      "com.xpn.xwiki.internal.skin.InternalSkinConfiguration",
      "org.apache.commons.configuration.FileConfiguration",
      "org.apache.commons.configuration.FileSystemBased",
      "org.xwiki.component.annotation.Component",
      "org.apache.commons.lang.exception.NestableRuntimeException",
      "org.apache.commons.configuration.ConfigurationUtils",
      "org.apache.commons.lang.text.StrLookup",
      "com.xpn.xwiki.internal.skin.AbstractEnvironmentResource",
      "org.apache.commons.configuration.ConversionException",
      "org.apache.commons.configuration.PropertiesConfiguration",
      "org.xwiki.environment.Environment",
      "org.apache.commons.configuration.BaseConfiguration",
      "org.apache.commons.configuration.VerifiableOutputStream",
      "org.apache.commons.configuration.event.EventSource",
      "org.apache.commons.configuration.AbstractFileConfiguration",
      "org.apache.commons.configuration.interpol.ConfigurationInterpolator",
      "org.apache.commons.logging.impl.NoOpLog",
      "org.xwiki.skin.ResourceRepository",
      "com.xpn.xwiki.internal.skin.SkinEnvironmentResource",
      "org.apache.commons.lang.exception.Nestable",
      "org.xwiki.rendering.syntax.SyntaxFactory",
      "org.apache.commons.configuration.ConfigurationRuntimeException",
      "org.apache.commons.configuration.DefaultFileSystem",
      "com.xpn.xwiki.XWikiContext",
      "com.xpn.xwiki.internal.skin.EnvironmentSkin"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.xpn.xwiki.internal.skin.InternalSkinConfiguration", false, EnvironmentSkin_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.inject.Provider", false, EnvironmentSkin_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.slf4j.Logger", false, EnvironmentSkin_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.xwiki.environment.Environment", false, EnvironmentSkin_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.xwiki.rendering.syntax.SyntaxFactory", false, EnvironmentSkin_ESTest_scaffolding.class.getClassLoader()));
  }
}
