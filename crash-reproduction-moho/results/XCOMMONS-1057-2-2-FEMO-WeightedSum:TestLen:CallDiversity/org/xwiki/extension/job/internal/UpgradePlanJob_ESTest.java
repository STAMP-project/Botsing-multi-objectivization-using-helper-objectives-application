/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 04 11:53:47 UTC 2020
 */

package org.xwiki.extension.job.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.component.namespace.NamespaceValidator;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.handler.ExtensionHandlerManager;
import org.xwiki.extension.job.internal.AbstractExtensionJob;
import org.xwiki.extension.job.internal.AbstractInstallPlanJob;
import org.xwiki.extension.job.internal.UpgradePlanJob;
import org.xwiki.extension.job.plan.ExtensionPlanNode;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.ExtensionRepositoryManager;
import org.xwiki.extension.repository.InstalledExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.version.internal.DefaultVersion;
import org.xwiki.job.AbstractJob;
import org.xwiki.job.JobContext;
import org.xwiki.job.JobStatusStore;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.logging.LoggerManager;
import org.xwiki.observation.ObservationManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class UpgradePlanJob_ESTest extends UpgradePlanJob_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UpgradePlanJob upgradePlanJob0 = new UpgradePlanJob();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractInstallPlanJob.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      NamespaceValidator namespaceValidator0 = mock(NamespaceValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractInstallPlanJob.class, "namespaceResolver", (Object) namespaceValidator0);
      ExtensionRepositoryManager extensionRepositoryManager0 = mock(ExtensionRepositoryManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractInstallPlanJob.class, "repositoryManager", (Object) extensionRepositoryManager0);
      ExtensionHandlerManager extensionHandlerManager0 = mock(ExtensionHandlerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractExtensionJob.class, "extensionHandlerManager", (Object) extensionHandlerManager0);
      InstalledExtensionRepository installedExtensionRepository0 = mock(InstalledExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractExtensionJob.class, "installedExtensionRepository", (Object) installedExtensionRepository0);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractExtensionJob.class, "localExtensionRepository", (Object) localExtensionRepository0);
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "componentManager", (Object) componentManager0);
      Provider<DefaultVersion> provider0 = (Provider<DefaultVersion>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "executionContextManagerProvider", (Object) provider0);
      Provider<ExtensionId> provider1 = (Provider<ExtensionId>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "executionProvider", (Object) provider1);
      JobContext jobContext0 = mock(JobContext.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "jobContext", (Object) jobContext0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "logger", (Object) logger0);
      LoggerManager loggerManager0 = mock(LoggerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "loggerManager", (Object) loggerManager0);
      ObservationManager observationManager0 = mock(ObservationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "observationManager", (Object) observationManager0);
      JobProgressManager jobProgressManager0 = mock(JobProgressManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "progressManager", (Object) jobProgressManager0);
      JobStatusStore jobStatusStore0 = mock(JobStatusStore.class, new ViolatedAssumptionAnswer());
      Injector.inject(upgradePlanJob0, (Class<?>) AbstractJob.class, "store", (Object) jobStatusStore0);
      Injector.validateBean(upgradePlanJob0, (Class<?>) UpgradePlanJob.class);
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree0 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      upgradePlanJob0.extensionTree = abstractInstallPlanJob_ModifableExtensionPlanTree0;
      ExtensionPlanNode extensionPlanNode0 = mock(ExtensionPlanNode.class, new ViolatedAssumptionAnswer());
      abstractInstallPlanJob_ModifableExtensionPlanTree0.add(extensionPlanNode0);
      // Undeclared exception!
      upgradePlanJob0.tryInstallExtension((ExtensionId) null, "S[I,lFk9FO");
  }
}
