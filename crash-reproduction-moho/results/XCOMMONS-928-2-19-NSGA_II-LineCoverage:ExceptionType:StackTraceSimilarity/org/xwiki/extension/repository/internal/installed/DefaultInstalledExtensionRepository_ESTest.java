/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 05 14:25:49 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.DefaultExtensionIssueManagement;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.ExtensionScm;
import org.xwiki.extension.repository.InstalledExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.test.EmptyExtension;
import org.xwiki.extension.version.internal.DefaultVersion;
import org.xwiki.extension.wrap.WrappingInstalledExtension;
import org.xwiki.extension.wrap.WrappingLocalExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<ExtensionAuthor> linkedList0 = new LinkedList<ExtensionAuthor>();
      Vector<DefaultExtensionDependency> vector0 = new Vector<DefaultExtensionDependency>();
      DefaultVersion defaultVersion0 = new DefaultVersion("");
      ExtensionId extensionId0 = new ExtensionId("", defaultVersion0);
      EmptyExtension emptyExtension0 = new EmptyExtension(extensionId0, ")*");
      Collection<String> collection0 = emptyExtension0.getFeatures();
      DefaultExtensionIssueManagement defaultExtensionIssueManagement0 = new DefaultExtensionIssueManagement(" w&-Oj;;Qrc_", "73Sg\"GAo");
      Vector<ExtensionLicense> vector1 = new Vector<ExtensionLicense>();
      DefaultInstalledExtension defaultInstalledExtension0 = mock(DefaultInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(defaultInstalledExtension0).getAuthors();
      doReturn("").when(defaultInstalledExtension0).getCategory();
      doReturn(vector0).when(defaultInstalledExtension0).getDependencies();
      doReturn("").when(defaultInstalledExtension0).getDescription();
      doReturn(collection0).when(defaultInstalledExtension0).getFeatures();
      doReturn(extensionId0).when(defaultInstalledExtension0).getId();
      doReturn(defaultExtensionIssueManagement0).when(defaultInstalledExtension0).getIssueManagement();
      doReturn(vector1).when(defaultInstalledExtension0).getLicenses();
      doReturn("Unexpected character (").when(defaultInstalledExtension0).getName();
      doReturn((Map<String, Object>) null).when(defaultInstalledExtension0).getProperties();
      doReturn((ExtensionScm) null).when(defaultInstalledExtension0).getScm();
      doReturn("").when(defaultInstalledExtension0).getSummary();
      doReturn(" w&-Oj;;Qrc_").when(defaultInstalledExtension0).getType();
      doReturn(" w&-Oj;;Qrc_").when(defaultInstalledExtension0).getWebSite();
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension0 = new WrappingInstalledExtension<DefaultInstalledExtension>(defaultInstalledExtension0);
      WrappingLocalExtension<WrappingLocalExtension<DefaultInstalledExtension>> wrappingLocalExtension0 = new WrappingLocalExtension<WrappingLocalExtension<DefaultInstalledExtension>>(wrappingInstalledExtension0);
      DefaultInstalledExtension defaultInstalledExtension1 = new DefaultInstalledExtension(wrappingLocalExtension0, (InstalledExtensionRepository) null);
  }
}
