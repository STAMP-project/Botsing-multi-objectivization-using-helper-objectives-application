/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 02 20:49:17 UTC 2020
 */

package org.xwiki.notifications.internal.email;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class AbstractMimeMessageIterator_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.xwiki.notifications.internal.email.AbstractMimeMessageIterator"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractMimeMessageIterator_ESTest_scaffolding.class.getClassLoader() ,
      "org.xwiki.mail.MailSenderConfiguration",
      "org.xwiki.stability.Unstable",
      "org.xwiki.bridge.DocumentModelBridge",
      "org.xwiki.component.annotation.Component",
      "org.xwiki.model.reference.EntityReference",
      "org.xwiki.notifications.internal.email.NotificationUserIterator",
      "org.xwiki.model.reference.ObjectPropertyReference",
      "org.xwiki.bridge.DocumentAccessBridge",
      "org.xwiki.component.annotation.Role",
      "org.xwiki.mail.MimeMessageFactory",
      "org.xwiki.notifications.CompositeEvent",
      "org.xwiki.notifications.internal.email.PeriodicMimeMessageIterator",
      "org.jfree.data.xy.XYDatasetTableModel",
      "org.xwiki.model.reference.ObjectReference",
      "org.jfree.data.general.DatasetChangeListener",
      "org.xwiki.component.descriptor.ComponentInstantiationStrategy",
      "org.xwiki.model.reference.DocumentReference",
      "org.xwiki.notifications.email.NotificationEmailRenderer",
      "org.xwiki.component.annotation.InstantiationStrategy",
      "org.xwiki.model.reference.AttachmentReference",
      "org.xwiki.notifications.NotificationException",
      "org.xwiki.notifications.internal.email.AbstractMimeMessageIterator",
      "org.xwiki.wiki.descriptor.WikiDescriptorManager"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.xwiki.bridge.DocumentAccessBridge", false, AbstractMimeMessageIterator_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.xwiki.mail.MimeMessageFactory", false, AbstractMimeMessageIterator_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.xwiki.notifications.email.NotificationEmailRenderer", false, AbstractMimeMessageIterator_ESTest_scaffolding.class.getClassLoader()));
  }
}
