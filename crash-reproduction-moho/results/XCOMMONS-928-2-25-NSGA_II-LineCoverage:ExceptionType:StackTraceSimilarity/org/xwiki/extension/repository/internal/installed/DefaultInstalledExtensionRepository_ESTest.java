/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 05 14:35:02 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.DefaultExtensionScm;
import org.xwiki.extension.DefaultExtensionScmConnection;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionIssueManagement;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.version.internal.DefaultVersion;
import org.xwiki.extension.version.internal.DefaultVersionConstraint;
import org.xwiki.extension.wrap.WrappingLocalExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      Vector<ExtensionAuthor> vector0 = new Vector<ExtensionAuthor>(2);
      LinkedList<DefaultExtensionDependency> linkedList0 = new LinkedList<DefaultExtensionDependency>();
      Vector<String> vector1 = new Vector<String>();
      DefaultVersion defaultVersion0 = new DefaultVersion("e");
      ExtensionId extensionId0 = new ExtensionId("e", defaultVersion0);
      PriorityQueue<ExtensionLicense> priorityQueue0 = new PriorityQueue<ExtensionLicense>();
      DefaultVersionConstraint defaultVersionConstraint0 = new DefaultVersionConstraint("%");
      DefaultExtensionDependency defaultExtensionDependency0 = new DefaultExtensionDependency("", defaultVersionConstraint0);
      Map<String, Object> map0 = defaultExtensionDependency0.getProperties();
      DefaultExtensionScmConnection defaultExtensionScmConnection0 = new DefaultExtensionScmConnection("e", "");
      DefaultExtensionScm defaultExtensionScm0 = new DefaultExtensionScm("", defaultExtensionScmConnection0, defaultExtensionScmConnection0);
      DefaultInstalledExtension defaultInstalledExtension0 = mock(DefaultInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(defaultInstalledExtension0).getAuthors();
      doReturn("e").when(defaultInstalledExtension0).getCategory();
      doReturn(linkedList0).when(defaultInstalledExtension0).getDependencies();
      doReturn("e").when(defaultInstalledExtension0).getDescription();
      doReturn(vector1).when(defaultInstalledExtension0).getFeatures();
      doReturn(extensionId0, (ExtensionId) null, (ExtensionId) null).when(defaultInstalledExtension0).getId();
      doReturn((ExtensionIssueManagement) null).when(defaultInstalledExtension0).getIssueManagement();
      doReturn(priorityQueue0).when(defaultInstalledExtension0).getLicenses();
      doReturn("e").when(defaultInstalledExtension0).getName();
      doReturn(map0).when(defaultInstalledExtension0).getProperties();
      doReturn(defaultExtensionScm0).when(defaultInstalledExtension0).getScm();
      doReturn("e").when(defaultInstalledExtension0).getSummary();
      doReturn("").when(defaultInstalledExtension0).getType();
      doReturn("").when(defaultInstalledExtension0).getWebSite();
      WrappingLocalExtension<DefaultInstalledExtension> wrappingLocalExtension0 = new WrappingLocalExtension<DefaultInstalledExtension>(defaultInstalledExtension0);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(wrappingLocalExtension0).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "logger", (Object) logger0);
      Injector.validateBean(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class);
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension((LocalExtension) wrappingLocalExtension0, "BK", true, (Map<String, Object>) null);
  }
}
