/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 01 11:12:33 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.DefaultExtensionIssueManagement;
import org.xwiki.extension.DefaultExtensionScm;
import org.xwiki.extension.DefaultExtensionScmConnection;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.version.internal.DefaultVersion;
import org.xwiki.extension.wrap.WrappingInstalledExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      LinkedList<ExtensionAuthor> linkedList0 = new LinkedList<ExtensionAuthor>();
      Vector<DefaultExtensionDependency> vector0 = new Vector<DefaultExtensionDependency>(1888);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(1888);
      DefaultExtensionIssueManagement defaultExtensionIssueManagement0 = new DefaultExtensionIssueManagement("t:|?v\"?\"3#-*lT|W5uk#", "t:|?v\"?\"3#-*lT|W5uk#");
      LinkedBlockingQueue<ExtensionLicense> linkedBlockingQueue0 = new LinkedBlockingQueue<ExtensionLicense>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) null);
      DefaultExtensionScmConnection defaultExtensionScmConnection0 = new DefaultExtensionScmConnection("", "");
      DefaultExtensionScm defaultExtensionScm0 = new DefaultExtensionScm((String) null, defaultExtensionScmConnection0, defaultExtensionScmConnection0);
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension0 = (WrappingInstalledExtension<DefaultInstalledExtension>) mock(WrappingInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(wrappingInstalledExtension0).getAuthors();
      doReturn("t:|?v\"?\"3#-*lT|W5uk#").when(wrappingInstalledExtension0).getCategory();
      doReturn(vector0).when(wrappingInstalledExtension0).getDependencies();
      doReturn("t:|?v\"?\"3#-*lT|W5uk#").when(wrappingInstalledExtension0).getDescription();
      doReturn(priorityQueue0).when(wrappingInstalledExtension0).getFeatures();
      doReturn((ExtensionId) null).when(wrappingInstalledExtension0).getId();
      doReturn(defaultExtensionIssueManagement0).when(wrappingInstalledExtension0).getIssueManagement();
      doReturn(linkedBlockingQueue0).when(wrappingInstalledExtension0).getLicenses();
      doReturn((String) null).when(wrappingInstalledExtension0).getName();
      doReturn(hashMap0).when(wrappingInstalledExtension0).getProperties();
      doReturn(defaultExtensionScm0).when(wrappingInstalledExtension0).getScm();
      doReturn((String) null).when(wrappingInstalledExtension0).getSummary();
      doReturn("I!B3xwQt6R;Ghva=j5t").when(wrappingInstalledExtension0).getType();
      doReturn("t:|?v\"?\"3#-*lT|W5uk#").when(wrappingInstalledExtension0).getWebSite();
      WrappingInstalledExtension<WrappingInstalledExtension<DefaultInstalledExtension>> wrappingInstalledExtension1 = new WrappingInstalledExtension<WrappingInstalledExtension<DefaultInstalledExtension>>(wrappingInstalledExtension0);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(wrappingInstalledExtension1).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "logger", (Object) logger0);
      Injector.validateBean(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class);
      DefaultVersion defaultVersion0 = new DefaultVersion("");
      ExtensionId extensionId0 = new ExtensionId("t:|?v\"?\"3#-*lT|W5uk#", defaultVersion0);
      LocalExtension localExtension0 = mock(LocalExtension.class, new ViolatedAssumptionAnswer());
      doReturn(extensionId0, extensionId0).when(localExtension0).getId();
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension(localExtension0, "?o:ecOnN ", false, (Map<String, Object>) hashMap0);
  }
}
