/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Apr 07 22:53:13 UTC 2020
 */

package org.xwiki.rendering.internal.parser;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class DefaultContentParser_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.xwiki.rendering.internal.parser.DefaultContentParser"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DefaultContentParser_ESTest_scaffolding.class.getClassLoader() ,
      "com.xpn.xwiki.XWikiException",
      "org.xwiki.rendering.parser.ParseException",
      "org.xwiki.rendering.block.XDOM",
      "org.xwiki.model.internal.reference.AbstractStringEntityReferenceSerializer",
      "org.xwiki.bridge.DocumentModelBridge",
      "org.xwiki.model.reference.EntityReference",
      "org.xwiki.rendering.internal.parser.DefaultContentParser",
      "org.xwiki.model.internal.reference.DefaultSymbolScheme",
      "org.apache.commons.lang3.StringUtils",
      "org.xwiki.rendering.syntax.Syntax",
      "org.xwiki.observation.event.filter.AlwaysMatchingEventFilter",
      "org.xwiki.rendering.internal.parser.twiki.TWikiParser",
      "org.xwiki.observation.event.FilterableEvent",
      "org.xwiki.component.manager.CompatibilityComponentManager",
      "org.xwiki.model.EntityType",
      "org.xwiki.rendering.parser.ContentParser",
      "org.xwiki.model.reference.EntityReferenceSerializer",
      "org.xwiki.observation.event.AbstractFilterableEvent",
      "org.xwiki.rendering.parser.Parser",
      "org.xwiki.rendering.block.MetaDataBlock",
      "org.xwiki.bridge.event.DocumentUpdatedEvent",
      "org.xwiki.model.internal.reference.LocalizedStringEntityReferenceSerializer",
      "org.xwiki.model.internal.reference.SymbolScheme",
      "org.xwiki.model.internal.reference.DefaultStringEntityReferenceSerializer",
      "org.xwiki.component.manager.ComponentManager",
      "org.xwiki.observation.event.filter.EventFilter",
      "org.xwiki.observation.EventListener",
      "org.xwiki.rendering.internal.parser.doxia.AbstractDoxiaParser",
      "org.xwiki.bridge.event.DocumentDeletedEvent",
      "org.xwiki.rendering.block.AbstractBlock",
      "org.xwiki.query.QueryException",
      "org.xwiki.bridge.event.DocumentCreatedEvent",
      "org.xwiki.component.annotation.Component",
      "org.xwiki.model.internal.reference.DefaultSymbolScheme$1",
      "org.xwiki.component.manager.ComponentLookupException",
      "org.xwiki.rendering.block.Block",
      "org.xwiki.rendering.parser.MissingParserException",
      "org.xwiki.model.reference.DocumentReferenceResolver",
      "org.xwiki.observation.event.CancelableEvent",
      "com.xpn.xwiki.user.api.XWikiGroupService",
      "org.xwiki.rendering.syntax.SyntaxType",
      "org.xwiki.rendering.parser.StreamParser",
      "org.xwiki.observation.event.AbstractCancelableEvent",
      "org.xwiki.bridge.event.AbstractDocumentEvent",
      "com.xpn.xwiki.user.impl.xwiki.XWikiGroupServiceImpl$1",
      "org.xwiki.model.reference.DocumentReference",
      "org.xwiki.observation.event.Event",
      "com.xpn.xwiki.user.impl.xwiki.XWikiGroupServiceImpl",
      "com.xpn.xwiki.doc.XWikiDocument",
      "org.xwiki.cache.CacheException",
      "org.xwiki.cache.Cache"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.inject.Provider", false, DefaultContentParser_ESTest_scaffolding.class.getClassLoader()));
  }
}
