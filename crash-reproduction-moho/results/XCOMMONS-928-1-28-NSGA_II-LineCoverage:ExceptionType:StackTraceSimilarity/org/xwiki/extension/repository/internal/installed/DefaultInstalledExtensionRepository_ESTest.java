/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 05 14:43:19 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import javatests.DiamondIterableMapMRO;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.DefaultExtensionIssueManagement;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.ExtensionScm;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.InstalledExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.test.EmptyExtension;
import org.xwiki.extension.version.Version;
import org.xwiki.extension.wrap.WrappingInstalledExtension;
import org.xwiki.extension.wrap.WrappingLocalExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      Vector<ExtensionAuthor> vector0 = new Vector<ExtensionAuthor>();
      LinkedList<DefaultExtensionDependency> linkedList0 = new LinkedList<DefaultExtensionDependency>();
      EmptyExtension emptyExtension0 = new EmptyExtension((ExtensionId) null, "vn.\\]x4-3DllT");
      Collection<String> collection0 = emptyExtension0.getFeatures();
      DefaultExtensionIssueManagement defaultExtensionIssueManagement0 = new DefaultExtensionIssueManagement("vn.\\]x4-3DllT", "vn.\\]x4-3DllT");
      LinkedBlockingQueue<ExtensionLicense> linkedBlockingQueue0 = new LinkedBlockingQueue<ExtensionLicense>();
      DiamondIterableMapMRO diamondIterableMapMRO0 = new DiamondIterableMapMRO();
      DefaultInstalledExtension defaultInstalledExtension0 = mock(DefaultInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(defaultInstalledExtension0).getAuthors();
      doReturn("r&RJ%").when(defaultInstalledExtension0).getCategory();
      doReturn(linkedList0).when(defaultInstalledExtension0).getDependencies();
      doReturn("Su$_,&msY1VRZ\"'&}/").when(defaultInstalledExtension0).getDescription();
      doReturn(collection0).when(defaultInstalledExtension0).getFeatures();
      doReturn((ExtensionId) null).when(defaultInstalledExtension0).getId();
      doReturn(defaultExtensionIssueManagement0).when(defaultInstalledExtension0).getIssueManagement();
      doReturn(linkedBlockingQueue0).when(defaultInstalledExtension0).getLicenses();
      doReturn("BDS{ aDLb$a9").when(defaultInstalledExtension0).getName();
      doReturn(diamondIterableMapMRO0).when(defaultInstalledExtension0).getProperties();
      doReturn((ExtensionScm) null).when(defaultInstalledExtension0).getScm();
      doReturn("BDS{ aDLb$a9").when(defaultInstalledExtension0).getSummary();
      doReturn("+j%").when(defaultInstalledExtension0).getType();
      doReturn("r&RJ%").when(defaultInstalledExtension0).getWebSite();
      WrappingLocalExtension<DefaultInstalledExtension> wrappingLocalExtension0 = new WrappingLocalExtension<DefaultInstalledExtension>(defaultInstalledExtension0);
      DefaultInstalledExtension defaultInstalledExtension1 = new DefaultInstalledExtension(wrappingLocalExtension0, (InstalledExtensionRepository) null);
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension0 = new WrappingInstalledExtension<DefaultInstalledExtension>(defaultInstalledExtension1);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(wrappingInstalledExtension0).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "logger", (Object) logger0);
      Injector.validateBean(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class);
      ExtensionId extensionId0 = new ExtensionId("XsDk*pW(Svh$", (Version) null);
      LocalExtension localExtension0 = mock(LocalExtension.class, new ViolatedAssumptionAnswer());
      doReturn(extensionId0, extensionId0).when(localExtension0).getId();
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension(localExtension0, "K7jJ$s}^J~DJ6blaT&", true, (Map<String, Object>) null);
  }
}
