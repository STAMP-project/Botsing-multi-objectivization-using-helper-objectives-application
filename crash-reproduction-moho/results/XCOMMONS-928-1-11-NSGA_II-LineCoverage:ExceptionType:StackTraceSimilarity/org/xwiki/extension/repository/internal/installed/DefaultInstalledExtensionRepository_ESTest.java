/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 05 14:10:47 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionIssueManagement;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.ExtensionScm;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.wrap.WrappingInstalledExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      LinkedBlockingQueue<ExtensionAuthor> linkedBlockingQueue0 = new LinkedBlockingQueue<ExtensionAuthor>();
      LinkedBlockingQueue<DefaultExtensionDependency> linkedBlockingQueue1 = new LinkedBlockingQueue<DefaultExtensionDependency>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ExtensionId extensionId0 = new ExtensionId("Extension [%s] is not installed on namespace [%s]", "Extension [%s] is not installed on namespace [%s]");
      Vector<ExtensionLicense> vector0 = new Vector<ExtensionLicense>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      WrappingInstalledExtension<DefaultInstalledExtension> wrappingInstalledExtension0 = (WrappingInstalledExtension<DefaultInstalledExtension>) mock(WrappingInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(linkedBlockingQueue0).when(wrappingInstalledExtension0).getAuthors();
      doReturn("Extension [%s] is not installed on namespace [%s]").when(wrappingInstalledExtension0).getCategory();
      doReturn(linkedBlockingQueue1).when(wrappingInstalledExtension0).getDependencies();
      doReturn("").when(wrappingInstalledExtension0).getDescription();
      doReturn(linkedBlockingDeque0).when(wrappingInstalledExtension0).getFeatures();
      doReturn(extensionId0, extensionId0, extensionId0).when(wrappingInstalledExtension0).getId();
      doReturn((ExtensionIssueManagement) null).when(wrappingInstalledExtension0).getIssueManagement();
      doReturn(vector0).when(wrappingInstalledExtension0).getLicenses();
      doReturn(">o{l0").when(wrappingInstalledExtension0).getName();
      doReturn(hashMap0).when(wrappingInstalledExtension0).getProperties();
      doReturn((ExtensionScm) null).when(wrappingInstalledExtension0).getScm();
      doReturn("HoF;Vm@7!C`CBez/.s").when(wrappingInstalledExtension0).getSummary();
      doReturn(">o{l0").when(wrappingInstalledExtension0).getType();
      doReturn("HoF;Vm@7!C`CBez/.s").when(wrappingInstalledExtension0).getWebSite();
      WrappingInstalledExtension<WrappingInstalledExtension<DefaultInstalledExtension>> wrappingInstalledExtension1 = new WrappingInstalledExtension<WrappingInstalledExtension<DefaultInstalledExtension>>(wrappingInstalledExtension0);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(wrappingInstalledExtension1).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "logger", (Object) logger0);
      Injector.validateBean(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class);
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension((LocalExtension) wrappingInstalledExtension1, "chmod", false, (Map<String, Object>) null);
  }
}
