/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 07 16:58:31 UTC 2020
 */

package org.xwiki.extension.repository.internal.installed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.extension.DefaultExtensionDependency;
import org.xwiki.extension.DefaultExtensionIssueManagement;
import org.xwiki.extension.ExtensionAuthor;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.ExtensionLicense;
import org.xwiki.extension.ExtensionScm;
import org.xwiki.extension.LocalExtension;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.repository.InstalledExtensionRepository;
import org.xwiki.extension.repository.LocalExtensionRepository;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtensionRepository;
import org.xwiki.extension.wrap.WrappingLocalExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DefaultInstalledExtensionRepository_ESTest extends DefaultInstalledExtensionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultInstalledExtensionRepository defaultInstalledExtensionRepository0 = new DefaultInstalledExtensionRepository();
      CoreExtensionRepository coreExtensionRepository0 = mock(CoreExtensionRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "coreExtensionRepository", (Object) coreExtensionRepository0);
      LinkedList<ExtensionAuthor> linkedList0 = new LinkedList<ExtensionAuthor>();
      Vector<DefaultExtensionDependency> vector0 = new Vector<DefaultExtensionDependency>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ExtensionId extensionId0 = new ExtensionId("oq.2", "The extension [%s] is already installed on namespace [%s]");
      DefaultExtensionIssueManagement defaultExtensionIssueManagement0 = new DefaultExtensionIssueManagement("The extension [%s] is already installed on namespace [%s]", "The extension [%s] is already installed on namespace [%s]");
      PriorityQueue<ExtensionLicense> priorityQueue0 = new PriorityQueue<ExtensionLicense>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DefaultInstalledExtension defaultInstalledExtension0 = mock(DefaultInstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(defaultInstalledExtension0).getAuthors();
      doReturn("The extension [%s] is already installed on namespace [%s]").when(defaultInstalledExtension0).getCategory();
      doReturn(vector0).when(defaultInstalledExtension0).getDependencies();
      doReturn("The extension [%s] is already installed on namespace [%s]").when(defaultInstalledExtension0).getDescription();
      doReturn(arrayDeque0).when(defaultInstalledExtension0).getFeatures();
      doReturn(extensionId0).when(defaultInstalledExtension0).getId();
      doReturn(defaultExtensionIssueManagement0).when(defaultInstalledExtension0).getIssueManagement();
      doReturn(priorityQueue0).when(defaultInstalledExtension0).getLicenses();
      doReturn("Invalid extension [{}] ({})").when(defaultInstalledExtension0).getName();
      doReturn(hashMap0).when(defaultInstalledExtension0).getProperties();
      doReturn((ExtensionScm) null).when(defaultInstalledExtension0).getScm();
      doReturn("#7AasW1.? ").when(defaultInstalledExtension0).getSummary();
      doReturn("Invalid extension [{}] ({})").when(defaultInstalledExtension0).getType();
      doReturn("s/'_p{O8T3;&}").when(defaultInstalledExtension0).getWebSite();
      WrappingLocalExtension<DefaultInstalledExtension> wrappingLocalExtension0 = new WrappingLocalExtension<DefaultInstalledExtension>(defaultInstalledExtension0);
      DefaultInstalledExtension defaultInstalledExtension1 = new DefaultInstalledExtension(wrappingLocalExtension0, (InstalledExtensionRepository) null);
      LocalExtensionRepository localExtensionRepository0 = mock(LocalExtensionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(defaultInstalledExtension1).when(localExtensionRepository0).getLocalExtension(any(org.xwiki.extension.ExtensionId.class));
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "localRepository", (Object) localExtensionRepository0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class, "logger", (Object) logger0);
      Injector.validateBean(defaultInstalledExtensionRepository0, (Class<?>) DefaultInstalledExtensionRepository.class);
      // Undeclared exception!
      defaultInstalledExtensionRepository0.installExtension((LocalExtension) defaultInstalledExtension1, "FF;~qpnaQk8mG", false, (Map<String, Object>) null);
  }
}
