/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 07 06:40:49 UTC 2020
 */

package org.xwiki.query.xwql.internal.hql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.doc.DefaultDocumentAccessBridge;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.context.Execution;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.query.jpql.parser.ParserException;
import org.xwiki.query.xwql.internal.hql.XWQLtoHQLTranslator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class XWQLtoHQLTranslator_ESTest extends XWQLtoHQLTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XWQLtoHQLTranslator xWQLtoHQLTranslator0 = new XWQLtoHQLTranslator();
      DefaultDocumentAccessBridge defaultDocumentAccessBridge0 = new DefaultDocumentAccessBridge();
      Provider<String> provider0 = (Provider<String>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class, "authorizationProvider", (Object) provider0);
      EntityReferenceSerializer<String> entityReferenceSerializer0 = (EntityReferenceSerializer<String>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class, "compactWikiEntityReferenceSerializer", (Object) entityReferenceSerializer0);
      DocumentReferenceResolver<Object> documentReferenceResolver0 = (DocumentReferenceResolver<Object>) mock(DocumentReferenceResolver.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class, "currentMixedDocumentReferenceResolver", (Object) documentReferenceResolver0);
      EntityReferenceSerializer<Integer> entityReferenceSerializer1 = (EntityReferenceSerializer<Integer>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class, "defaultEntityReferenceSerializer", (Object) entityReferenceSerializer1);
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class, "execution", (Object) execution0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class, "logger", (Object) logger0);
      Injector.validateBean(defaultDocumentAccessBridge0, (Class<?>) DefaultDocumentAccessBridge.class);
      Injector.inject(xWQLtoHQLTranslator0, (Class<?>) XWQLtoHQLTranslator.class, "documentAccessBridge", (Object) defaultDocumentAccessBridge0);
      try { 
        xWQLtoHQLTranslator0.translate("where");
        fail("Expecting exception: ParserException");
      
      } catch(ParserException e) {
         //
         // [1,47] expecting: '(', abs, concat, count, length, locate, lower, mod, not, size, sqrt, substring, trim, upper, boolean literal, integer literal, float literal, string literal, input parameter, aggregate func, add sub, functions returning datetime, id
         //
         verifyException("org.xwiki.query.jpql.parser.Parser", e);
      }
  }
}
