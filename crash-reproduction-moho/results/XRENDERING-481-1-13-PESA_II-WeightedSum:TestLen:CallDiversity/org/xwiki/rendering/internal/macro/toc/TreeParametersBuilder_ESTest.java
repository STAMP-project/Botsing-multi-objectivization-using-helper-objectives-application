/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 03 14:24:41 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.Map;
import javax.inject.Provider;
import javax.print.attribute.Attribute;
import javax.print.attribute.standard.Severity;
import org.apache.commons.dbcp2.PoolingConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.component.internal.AbstractEntityComponentManager;
import org.xwiki.component.internal.ContextComponentManager;
import org.xwiki.component.internal.RootComponentManager;
import org.xwiki.component.internal.SpaceComponentManager;
import org.xwiki.component.internal.multi.AbstractGenericComponentManager;
import org.xwiki.component.internal.multi.ComponentManagerManager;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContext;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.SectionBlock;
import org.xwiki.rendering.internal.macro.toc.TreeParametersBuilder;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TreeParametersBuilder_ESTest extends TreeParametersBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeParametersBuilder treeParametersBuilder0 = new TreeParametersBuilder();
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      TocMacroParameters tocMacroParameters0 = mock(TocMacroParameters.class, new ViolatedAssumptionAnswer());
      doReturn((-575)).when(tocMacroParameters0).getDepth();
      doReturn("Unable to validaBe object").when(tocMacroParameters0).getReference();
      doReturn(tocMacroParameters_Scope0).when(tocMacroParameters0).getScope();
      doReturn(0).when(tocMacroParameters0).getStart();
      doReturn(false).when(tocMacroParameters0).isCustomStart();
      doReturn(true).when(tocMacroParameters0).isNumbered();
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      ContextComponentManager contextComponentManager0 = new ContextComponentManager();
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionContext) null).when(execution0).getContext();
      Injector.inject(contextComponentManager0, (Class<?>) ContextComponentManager.class, "execution", (Object) execution0);
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager("`ejs|K}");
      Injector.inject(contextComponentManager0, (Class<?>) ContextComponentManager.class, "rootComponentManager", (Object) embeddableComponentManager0);
      SpaceComponentManager spaceComponentManager0 = new SpaceComponentManager();
      Provider<SectionBlock> provider0 = (Provider<SectionBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) SpaceComponentManager.class, "referenceProvider", (Object) provider0);
      RootComponentManager rootComponentManager0 = new RootComponentManager();
      Injector.inject(rootComponentManager0, (Class<?>) RootComponentManager.class, "rootComponentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(rootComponentManager0, (Class<?>) RootComponentManager.class);
      Injector.inject(spaceComponentManager0, (Class<?>) SpaceComponentManager.class, "wikiComponentManager", (Object) rootComponentManager0);
      Execution execution1 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "execution", (Object) execution1);
      EntityReferenceSerializer<PoolingConnection> entityReferenceSerializer0 = (EntityReferenceSerializer<PoolingConnection>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "serializer", (Object) entityReferenceSerializer0);
      ComponentManagerManager componentManagerManager0 = mock(ComponentManagerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) AbstractGenericComponentManager.class, "componentManagerManager", (Object) componentManagerManager0);
      Injector.validateBean(spaceComponentManager0, (Class<?>) SpaceComponentManager.class);
      Injector.inject(contextComponentManager0, (Class<?>) ContextComponentManager.class, "userComponentManager", (Object) spaceComponentManager0);
      Injector.validateBean(contextComponentManager0, (Class<?>) ContextComponentManager.class);
      Severity severity0 = Severity.WARNING;
      Class<? extends Attribute> class0 = severity0.getCategory();
      Map<String, String> map0 = contextComponentManager0.getInstanceMap((Type) class0);
      MacroBlock macroBlock0 = new MacroBlock("Unable to validaBe object", map0, "SynchronizedObjectPool", true);
      macroTransformationContext0.setCurrentMacroBlock(macroBlock0);
      // Undeclared exception!
      treeParametersBuilder0.build(block0, tocMacroParameters0, macroTransformationContext0);
  }
}
