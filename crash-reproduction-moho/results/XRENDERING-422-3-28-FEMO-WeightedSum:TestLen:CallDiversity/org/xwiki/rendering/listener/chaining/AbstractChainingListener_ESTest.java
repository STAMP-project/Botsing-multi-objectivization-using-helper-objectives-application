/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 04 17:55:44 UTC 2020
 */

package org.xwiki.rendering.listener.chaining;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.rendering.listener.Format;
import org.xwiki.rendering.listener.HeaderLevel;
import org.xwiki.rendering.listener.ListType;
import org.xwiki.rendering.listener.chaining.ConsecutiveNewLineStateChainingListener;
import org.xwiki.rendering.listener.chaining.EmptyBlockChainingListener;
import org.xwiki.rendering.listener.chaining.ListenerChain;
import org.xwiki.rendering.listener.chaining.LookaheadChainingListenerTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractChainingListener_ESTest extends AbstractChainingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LookaheadChainingListenerTest lookaheadChainingListenerTest0 = new LookaheadChainingListenerTest();
      ListenerChain listenerChain0 = new ListenerChain();
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener0 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      EmptyBlockChainingListener emptyBlockChainingListener0 = new EmptyBlockChainingListener(listenerChain0);
      ListenerChain listenerChain1 = mock(ListenerChain.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(listenerChain1).toString();
      doReturn(consecutiveNewLineStateChainingListener0, consecutiveNewLineStateChainingListener0, consecutiveNewLineStateChainingListener0, emptyBlockChainingListener0).when(listenerChain1).getNextListener(nullable(java.lang.Class.class));
      LookaheadChainingListenerTest.TestChainingListener lookaheadChainingListenerTest_TestChainingListener0 = lookaheadChainingListenerTest0.new TestChainingListener(listenerChain1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HeaderLevel headerLevel0 = HeaderLevel.LEVEL2;
      lookaheadChainingListenerTest_TestChainingListener0.beginHeader(headerLevel0, "", hashMap0);
      lookaheadChainingListenerTest_TestChainingListener0.beginQuotation(hashMap0);
      ListType listType0 = ListType.BULLETED;
      lookaheadChainingListenerTest_TestChainingListener0.endList(listType0, hashMap0);
      Format format0 = Format.MONOSPACE;
      // Undeclared exception!
      lookaheadChainingListenerTest_TestChainingListener0.endFormat(format0, hashMap0);
  }
}
